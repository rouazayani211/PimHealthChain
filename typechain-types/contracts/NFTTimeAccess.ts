/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface NFTTimeAccessInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "accessGrants"
      | "getAccessGrant"
      | "grantAccess"
      | "hasAccess"
      | "owner"
      | "renounceOwnership"
      | "revokeAccess"
      | "transferOwnership"
      | "useAccess"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AccessGranted"
      | "AccessRevoked"
      | "AccessUsed"
      | "OwnershipTransferred"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "accessGrants",
    values: [AddressLike, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAccessGrant",
    values: [AddressLike, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantAccess",
    values: [AddressLike, BigNumberish, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "hasAccess",
    values: [AddressLike, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "revokeAccess",
    values: [AddressLike, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "useAccess",
    values: [AddressLike, BigNumberish, AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "accessGrants",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccessGrant",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "grantAccess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasAccess", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeAccess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "useAccess", data: BytesLike): Result;
}

export namespace AccessGrantedEvent {
  export type InputTuple = [
    nftContract: AddressLike,
    tokenId: BigNumberish,
    user: AddressLike,
    startTime: BigNumberish,
    endTime: BigNumberish
  ];
  export type OutputTuple = [
    nftContract: string,
    tokenId: bigint,
    user: string,
    startTime: bigint,
    endTime: bigint
  ];
  export interface OutputObject {
    nftContract: string;
    tokenId: bigint;
    user: string;
    startTime: bigint;
    endTime: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AccessRevokedEvent {
  export type InputTuple = [
    nftContract: AddressLike,
    tokenId: BigNumberish,
    user: AddressLike
  ];
  export type OutputTuple = [
    nftContract: string,
    tokenId: bigint,
    user: string
  ];
  export interface OutputObject {
    nftContract: string;
    tokenId: bigint;
    user: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AccessUsedEvent {
  export type InputTuple = [
    nftContract: AddressLike,
    tokenId: BigNumberish,
    user: AddressLike
  ];
  export type OutputTuple = [
    nftContract: string,
    tokenId: bigint,
    user: string
  ];
  export interface OutputObject {
    nftContract: string;
    tokenId: bigint;
    user: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface NFTTimeAccess extends BaseContract {
  connect(runner?: ContractRunner | null): NFTTimeAccess;
  waitForDeployment(): Promise<this>;

  interface: NFTTimeAccessInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  accessGrants: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish, arg2: AddressLike],
    [
      [string, bigint, bigint, boolean] & {
        user: string;
        startTime: bigint;
        endTime: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;

  getAccessGrant: TypedContractMethod<
    [nftContract: AddressLike, tokenId: BigNumberish, user: AddressLike],
    [
      [bigint, bigint, boolean] & {
        startTime: bigint;
        endTime: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;

  grantAccess: TypedContractMethod<
    [
      nftContract: AddressLike,
      tokenId: BigNumberish,
      user: AddressLike,
      durationInSeconds: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  hasAccess: TypedContractMethod<
    [nftContract: AddressLike, tokenId: BigNumberish, user: AddressLike],
    [boolean],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  revokeAccess: TypedContractMethod<
    [nftContract: AddressLike, tokenId: BigNumberish, user: AddressLike],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  useAccess: TypedContractMethod<
    [nftContract: AddressLike, tokenId: BigNumberish, user: AddressLike],
    [boolean],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "accessGrants"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish, arg2: AddressLike],
    [
      [string, bigint, bigint, boolean] & {
        user: string;
        startTime: bigint;
        endTime: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getAccessGrant"
  ): TypedContractMethod<
    [nftContract: AddressLike, tokenId: BigNumberish, user: AddressLike],
    [
      [bigint, bigint, boolean] & {
        startTime: bigint;
        endTime: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "grantAccess"
  ): TypedContractMethod<
    [
      nftContract: AddressLike,
      tokenId: BigNumberish,
      user: AddressLike,
      durationInSeconds: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasAccess"
  ): TypedContractMethod<
    [nftContract: AddressLike, tokenId: BigNumberish, user: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "revokeAccess"
  ): TypedContractMethod<
    [nftContract: AddressLike, tokenId: BigNumberish, user: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "useAccess"
  ): TypedContractMethod<
    [nftContract: AddressLike, tokenId: BigNumberish, user: AddressLike],
    [boolean],
    "nonpayable"
  >;

  getEvent(
    key: "AccessGranted"
  ): TypedContractEvent<
    AccessGrantedEvent.InputTuple,
    AccessGrantedEvent.OutputTuple,
    AccessGrantedEvent.OutputObject
  >;
  getEvent(
    key: "AccessRevoked"
  ): TypedContractEvent<
    AccessRevokedEvent.InputTuple,
    AccessRevokedEvent.OutputTuple,
    AccessRevokedEvent.OutputObject
  >;
  getEvent(
    key: "AccessUsed"
  ): TypedContractEvent<
    AccessUsedEvent.InputTuple,
    AccessUsedEvent.OutputTuple,
    AccessUsedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;

  filters: {
    "AccessGranted(address,uint256,address,uint256,uint256)": TypedContractEvent<
      AccessGrantedEvent.InputTuple,
      AccessGrantedEvent.OutputTuple,
      AccessGrantedEvent.OutputObject
    >;
    AccessGranted: TypedContractEvent<
      AccessGrantedEvent.InputTuple,
      AccessGrantedEvent.OutputTuple,
      AccessGrantedEvent.OutputObject
    >;

    "AccessRevoked(address,uint256,address)": TypedContractEvent<
      AccessRevokedEvent.InputTuple,
      AccessRevokedEvent.OutputTuple,
      AccessRevokedEvent.OutputObject
    >;
    AccessRevoked: TypedContractEvent<
      AccessRevokedEvent.InputTuple,
      AccessRevokedEvent.OutputTuple,
      AccessRevokedEvent.OutputObject
    >;

    "AccessUsed(address,uint256,address)": TypedContractEvent<
      AccessUsedEvent.InputTuple,
      AccessUsedEvent.OutputTuple,
      AccessUsedEvent.OutputObject
    >;
    AccessUsed: TypedContractEvent<
      AccessUsedEvent.InputTuple,
      AccessUsedEvent.OutputTuple,
      AccessUsedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
  };
}
